# -*- coding: utf-8 -*-
"""ml_model_realtest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B5ja85DpudOQgLO275rbbm047ok58R3o
"""

import pandas as pd
import pickle

import tensorflow as tf
#from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
model=tf.keras.models.load_model('pcmb20_model.h5')
with open('tokenizer20.pickle', 'rb') as handle:
    tokenizer = pickle.load(handle)

def prepare_question(text):
  text=text.replace('\n',' ')
#  vocab_size = 1000
#  oov_token = '<oov>'
  trunc='post'
  maxlen = 50
#  embedded_dim = 8
  # tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_token)
  # tokenizer.fit_on_texts([text])
  # word_index = tokenizer.word_index
  sequences = tokenizer.texts_to_sequences([text])
  return pad_sequences(sequences, maxlen=maxlen, truncating=trunc)

#from google.colab import drive
#drive.mount('/content/drive')

filename='class_omega.xlsx'

questions={}
list_of_subjects=['Physics','Chemistry','Maths','Biology']
for subjectname in list_of_subjects:
        df = pd.read_excel(filename, sheet_name=subjectname)
        questions[subjectname] = df[subjectname].tolist()       
        questions[subjectname] = [x for x in questions[subjectname] if not isinstance(x, int)]

def keyword_matcher(test_string):
    input=prepare_question(test_string)
    a=model.predict([input]).tolist()[0]
    max_val=max(a)
    max_index=a.index(max_val)

    subjects={
            0:'Biology',
            1:'Chemistry',
            2:'Maths',
            3:'Physics'
            }

    prediction=subjects[max_index]
    return prediction

for subjectname in list_of_subjects:
    print(filename.upper()+" "+subjectname.upper()+" QUESTION DATABASE TEST")
    result_dict={}
    result_dict['zero_matches']=0
    for s in list_of_subjects:
        result_dict[s]=0
    for question in questions[subjectname]:
        result=keyword_matcher(question)
        result_dict[result]+=1
    total_strings=len(questions[subjectname])
    print("Accuracy: "+str((result_dict[subjectname]/total_strings)*100)+"%")
    print("\nNumber of questions correctly identified= ",result_dict[subjectname])
    print("Total tests conducted=",total_strings)
    